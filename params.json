{"name":"Angular Enforcer","tagline":"Command line script to lint style rules in Angular templates and automatically correct them","body":"# angular-enforcer\r\nCommand line script to lint style rules in Angular templates and automatically correct them.\r\nCan be used on any HTML file, not just Angular templates.\r\n\r\n## Corrects missing end-tags\r\nfrom:\r\n```html\r\n<div>\r\n    <div>\r\n        <span>\r\n            <img>\r\n```\r\nto:\r\n```html\r\n<div>\r\n    <div>\r\n        <span>\r\n            <img>\r\n        </span>\r\n    </div>\r\n</div>\r\n```\r\n\r\n## Corrects inconsistent text case\r\nfrom:\r\n```html\r\n<B>BOLD TEXT</B>\r\n```\r\nto:\r\n```html\r\n<b>\r\n    BOLD TEXT\r\n</b>\r\n```\r\n\r\n## Installation\r\n`npm install angular-enforcer -g`\r\n\r\n## Usage\r\n### On a specific file\r\n`enforce [file path] [options]`\r\nwhere [file path] is a path to a file to enforce\r\n\r\n### On STDIN\r\n`cat [file path] | enforce -i`\r\nSimply pipe some file into the enforce command\r\n\r\n### On a glob\r\n`enforce -g [glob string] [options]`\r\nwhere [glob string] [node-glob](https://github.com/isaacs/node-glob) is a string to search for files using\r\nEx: `enforce -g src/folder/**/*.tpl`\r\n\r\n### On every html file in this folder and all child folders\r\n`enforce -g [options]`\r\nThis will run the angular-enforcer program on every html file in this folder and all child folders\r\n\r\n### From node\r\nYou can also import angular-enforcer and use it as you want.\r\n\r\n```js\r\nimport ngEnforcer from 'angular-enforcer';\r\nimport 'fs';\r\nconst file = fs.readFileSync('file');\r\nconst output = ngEnforcer(file, {\r\n    lineLength: 150\r\n});\r\n```\r\n\r\nThe ngEnforce function takes a string of HTML and options and returns formatted HTML.\r\nLinting is not available when using this method.\r\n\r\n\r\n## Options\r\n\r\n**Formatting options:**\r\n--tab-length : the number of spaces to consider a tab. Default is 4.\r\n--spaces : If true (default), converts spaces to tabs, using the specified tab length. Otherwise it does the reverse, converting tabs to spaces.\r\n--line-length : max line length. Default is 100.\r\n--closing-slash : if true, convert <br> to <br/>. Default is false.\r\n--short-tags : comma separated list of additional tags that have no associated end tag\r\n--expr-padding : add a space before and after angular expressions (and a space after the \"::\" in one-time binded expressions). Default is true.\r\n--attr-newline : If an html start tag is over the specified line-length, start each attribute on it's own line, indenting by one. Default is true.\r\n--empty-tag-same-line : Empty DOM nodes will end their tags on the same line if it's within the max line length.\r\n--short-text-nodes : DOM nodes with just text that can fit on one line will do so. Default is true. If this is false, the text nodes will be indented.\r\n--attr-obj-indent: Indent JS objects inside attributes, ex: inside ng-class. True by default.\r\n--double-quotes : If true, use double quotes for attributes, otherwise use single quotes.\r\n--reorder-attrs : If true, alphabetize HTML attributes in each tag\r\n--block-spacing : If true, add an empty line in between each HTML block\r\n--text-wrap : If true, break long text nodes so that indentation + length of text <= line-length. Defaults to true.\r\n--wrap-ignored-tags : comma separated list of tags to ignore long text nodes inside\r\n--remove-comments : if true, enforcer will remove all HTML comments\r\n\r\n\r\n**CLI-only options:**\r\n--config -c : path to the formatting config file. Default is .enforcer.json\r\n--save -S : report and correct all problems, overwriting all affected files\r\n--glob -g : Glob strings to look for files\r\n--stdin -i : read from STDIN instead of giving a file path.\r\n--verbose -v : more verbose reporting, including locations of problems.\r\n--quite -q : silences all output, even when using --diff or --verbose.\r\n--diff -d : print a colored diff of the changes\r\n\r\n## .enforcer.json JSON file\r\nAll options can be specified in an .enforcer.json file. All options are in camelCase.\r\n\r\n```json\r\n{\r\n     \"tabLength\": 2,\r\n     \"lineLength\": 120\r\n}\r\n```\r\n\r\n### Option load order:\r\n1. command line options\r\n2. .enforcer.json file in current directory (if it exists)\r\n3. .enforcer.json file in home directory (if it exists)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}